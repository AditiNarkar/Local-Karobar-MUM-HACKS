{"ast":null,"code":"var _jsxFileName = \"/Users/bigfatrat/Desktop/ADT/Local-Karobar/Local-Karobar-Final-1350/client-frontend/src/components/Leaflet.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\n//npm i react-leaflet\n//npm i leaflet\nimport 'leaflet/dist/leaflet.css';\nimport { MapContainer, TileLayer, Marker, useMap } from 'react-leaflet';\nimport L from \"leaflet\";\nimport { Search } from './Search.jsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst icon = L.icon({\n  iconUrl: \"location_icon.png\",\n  iconSize: [30, 30]\n});\nexport const Leaflet = () => {\n  _s();\n  const thanePosition = [19.2183, 72.9781];\n  const [selectedPlace, setSelectedPlace] = useState(\"\");\n  var locationMarker;\n  if (selectedPlace !== \"\") {\n    locationMarker = [selectedPlace.lat, selectedPlace.lon];\n  } else {\n    locationMarker = thanePosition;\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map\",\n      children: [/*#__PURE__*/_jsxDEV(MapContainer, {\n        style: {\n          height: \"500px\",\n          width: \"100%\"\n        },\n        center: thanePosition,\n        zoom: 13.2,\n        children: [/*#__PURE__*/_jsxDEV(TileLayer\n        // attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\"> OpenStreetMap </a> contributors'\n        //url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        , {\n          url: \"https://api.maptiler.com/maps/basic-v2/256/{z}/{x}/{y}.png?key=DcsGEOE2DeJyf3EOJv4Z\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Marker, {\n          position: locationMarker,\n          icon: icon\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ResetMapAnimation, {\n          locationMarker: locationMarker\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Search, {\n        selectedPlace: selectedPlace,\n        setSelectedPlace: setSelectedPlace\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n_s(Leaflet, \"gV4tIPpfPwlTbper1ALo5lHtMYg=\");\n_c = Leaflet;\nfunction ResetMapAnimation({\n  locationMarker\n}) {\n  _s2();\n  const map = useMap();\n  useEffect(() => {\n    if (locationMarker) {\n      map.setView(L.latLng(locationMarker[0], locationMarker[1]), map.getZoom(), {\n        animate: true\n      });\n    }\n  }, [locationMarker]);\n  return null;\n}\n_s2(ResetMapAnimation, \"IoceErwr5KVGS9kN4RQ1bOkYMAg=\", false, function () {\n  return [useMap];\n});\n_c2 = ResetMapAnimation;\nvar _c, _c2;\n$RefreshReg$(_c, \"Leaflet\");\n$RefreshReg$(_c2, \"ResetMapAnimation\");","map":{"version":3,"names":["React","useState","useEffect","MapContainer","TileLayer","Marker","useMap","L","Search","jsxDEV","_jsxDEV","Fragment","_Fragment","icon","iconUrl","iconSize","Leaflet","_s","thanePosition","selectedPlace","setSelectedPlace","locationMarker","lat","lon","children","id","style","height","width","center","zoom","url","fileName","_jsxFileName","lineNumber","columnNumber","position","ResetMapAnimation","_c","_s2","map","setView","latLng","getZoom","animate","_c2","$RefreshReg$"],"sources":["/Users/bigfatrat/Desktop/ADT/Local-Karobar/Local-Karobar-Final-1350/client-frontend/src/components/Leaflet.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react'\n//npm i react-leaflet\n//npm i leaflet\nimport 'leaflet/dist/leaflet.css'\nimport { MapContainer, TileLayer, Marker, useMap } from 'react-leaflet'\nimport L from \"leaflet\"\nimport { Search } from './Search.jsx';\n\nconst icon = L.icon({\n    iconUrl: \"location_icon.png\",\n    iconSize: [ 30, 30 ]\n})\n\n\nexport const Leaflet = () => {\n\n    const thanePosition = [19.2183, 72.9781]\n\n    const [selectedPlace, setSelectedPlace] = useState(\"\");\n    var locationMarker;\n    if(selectedPlace!==\"\")\n    {\n        locationMarker = [ selectedPlace.lat, selectedPlace.lon ]\n    }\n    else{\n        locationMarker = thanePosition\n    }\n\n    return (\n        <>\n        <div id=\"map\">\n            <MapContainer style={{ height: \"500px\", width: \"100%\" }} center={thanePosition} zoom={13.2}>\n            <TileLayer\n                // attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\"> OpenStreetMap </a> contributors'\n                //url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                url=\"https://api.maptiler.com/maps/basic-v2/256/{z}/{x}/{y}.png?key=DcsGEOE2DeJyf3EOJv4Z\"\n            />\n            <Marker position={locationMarker} icon={icon}>\n            </Marker>\n\n            <ResetMapAnimation locationMarker={locationMarker} />\n            </MapContainer>\n\n            <Search selectedPlace={selectedPlace} setSelectedPlace={setSelectedPlace}/>\n        </div>\n\n        </>\n    )\n}\n\nfunction ResetMapAnimation({locationMarker}) {\n    const map = useMap()\n\n    useEffect(() => {\n        if(locationMarker){\n            map.setView(\n                L.latLng(locationMarker[0], locationMarker[1]),\n                map.getZoom(),\n                { animate: true }\n            )\n        }\n    }, [locationMarker]);\n   \n    return null\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}